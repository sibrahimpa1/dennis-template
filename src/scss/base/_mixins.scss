/**
 * Helper mixins
*/
/// Create media query below horizontal breakpoint
/// ---
/// @require {variable} $breakpoints - Breakpoints
/// @param {String} $max-breakpoint - Max horizontal breakpoint
/// ---
/// @example scss - Usage
///   selector {
///     @include media-below("max-breakpoint") {
///       property: value;
///     }
///   }
@mixin media-below($max-breakpoint) {
	$max-width: (get-breakpoint("horizontal", $max-breakpoint) - 1);
	@media screen and (max-width: $max-width) {
		@content;
	}
}
/// Create media query between horizontal breakpoints
/// ---
/// @require {variable} $breakpoints - Breakpoints
/// @param {String} $min-breakpoint - Min horizontal breakpoint
/// @param {String} $max-breakpoint - Max horizontal breakpoint
/// ---
/// @example scss - Usage
///   selector {
///     @include media-between("min-breakpoint", "max-breakpoint") {
///       property: value;
///     }
///   }
@mixin media-between($min-breakpoint, $max-breakpoint) {
	$min-width: get-breakpoint("horizontal", $min-breakpoint);
	$max-width: (get-breakpoint("horizontal", $max-breakpoint) - 1);
	@media screen and (min-width: $min-width) and (max-width: $max-width) {
		@content;
	}
}
/// Create media query above horizontal breakpoint
/// ---
/// @require {variable} $breakpoints - Breakpoints
/// @param {String} $min-breakpoint - Min horizontal breakpoint
/// ---
/// @example scss - Usage
///   selector {
///     @include media-above("min-breakpoint") {
///       property: value;
///     }
///   }
@mixin media-above($min-breakpoint) {
	$min-width: get-breakpoint("horizontal", $min-breakpoint);
	@media screen and (min-width: $min-width) {
		@content;
	}
}
/// Create media query below vertical breakpoint
/// ---
/// @require {variable} $breakpoints - Breakpoints
/// @param {String} $max-breakpoint - Max vertical breakpoint
/// ---
/// @example scss - Usage
///   selector {
///     @include media-below--vertical("max-breakpoint") {
///       property: value;
///     }
///   }
@mixin media-below--vertical($max-breakpoint) {
	$max-height: (get-breakpoint("vertical", $max-breakpoint) - 1);
	@media screen and (max-height: $max-height) {
		@content;
	}
}
/// Create media query between vertical breakpoints
/// ---
/// @require {variable} $breakpoints - Breakpoints
/// @param {String} $min-breakpoint - Min vertical breakpoint
/// @param {String} $max-breakpoint - Max vertical breakpoint
/// ---
/// @example scss - Usage
///   selector {
///     @include media-between--vertical("min-breakpoint", "max-breakpoint") {
///       property: value;
///     }
///   }
@mixin media-between--vertical($min-breakpoint, $max-breakpoint) {
	$min-height: get-breakpoint("vertical", $min-breakpoint);
	$max-height: (get-breakpoint("vertical", $max-breakpoint) - 1);
	@media screen and (min-height: $min-height) and (max-height: $max-height) {
		@content;
	}
}
/// Create media query above vertical breakpoint
/// ---
/// @require {variable} $breakpoints - Breakpoints
/// @param {String} $min-breakpoint - Min vertical breakpoint
/// ---
/// @example scss - Usage
///   selector {
///     @include media-above--vertical("min-breakpoint") {
///       property: value;
///     }
///   }
@mixin media-above--vertical($min-breakpoint) {
	$min-height: get-breakpoint("vertical", $min-breakpoint);
	@media screen and (min-height: $min-height) {
		@content;
	}
}
/// Create media query for high density displays
/// ---
/// @example scss - Usage
///   selector {
///     background-image: url("/path/file.png");
///
///     @mixin media-hd() {
///       background-image: url("/path/file@2x.png");
///     }
///   }
@mixin media-hd() {
	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx) {
		@content;
	}
}
/// Create media query for ultra high density displays
/// ---
/// @example scss - Usage
///   selector {
///     background-image: url("/path/file.png");
///
///     @mixin media-hd() {
///       background-image: url("/path/file@3x.png");
///     }
///   }
@mixin media-uhd() {
	@media (-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx) {
		@content;
	}
}
@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-ms-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}
/// Needed for @font-face
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}
/// Create keyframes
/// ---
/// @example scss - Usage
///
/// @include @include font-face(Samplinal, fonts/Samplinal, 500, normal, eot woff2 woff);
/// Rendered as CSS:
///
///   @font-face {
///       font-family: "Samplinal";
///       font-style: normal;
///       font-weight: 500;
///       src: url("fonts/Samplinal.eot?") format("eot"),
///            url("fonts/Samplinal.woff2") format("woff2"),
///            url("fonts/Samplinal.woff") format("woff");
///   }
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;
	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);
	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);
	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}
	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
		font-display: swap;
	}
}
@mixin clearfix() {
	&:after,
	&:before {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}
// Text selection
@mixin text-selection($color-selection, $color-selection-bg) {
	::-moz-selection {
		// sass-lint:disable-line no-vendor-prefixes
		background: $color-selection-bg;
		color: $color-selection;
		text-shadow: none;
	}

	::selection {
		background: $color-selection-bg;
		color: $color-selection;
		text-shadow: none;
	}
}
//Placeholders
//Usage:
//@include placeholder;
@mixin placeholder {
	// sass-lint:disable no-vendor-prefixes
	::-webkit-input-placeholder {
		@content
	}

	:-moz-placeholder {
		@content
	}

	::-moz-placeholder {
		@content
	}

	:-ms-input-placeholder {
		@content
	}
}
